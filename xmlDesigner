package json_modify;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class xmldesigner {

	public static HashMap<tags_info, ArrayList<String>> map = new HashMap<>();
	public static HashMap<String, String> mapDesc = new HashMap<>();
	public static HashMap<String, ArrayList<String>> mapMethod = new HashMap<>();
	public static HashMap<String, ArrayList<xmlHelper>> mapMaster = new HashMap<>();
	public static JSONObject parent = null;

	public void setParent(JSONObject obj) {
		parent = obj;
	}

	public static void main(String[] args) {
		setJsonObject();
		fillTags();
		System.out.println("Hi");
		getPathsData();
		System.out.println(mapMaster);
		/*for (Map.Entry<String, ArrayList<xmlHelper>> entry : mapMaster.entrySet()) {
			ArrayList<xmlHelper> t = entry.getValue();

			System.out.println("Key = " + entry.getKey());
			for (xmlHelper h : t) {
				System.out.println(h.getMethod() + "="+ h.getPath() + "=" +h.getParameters().toString()+"="+h.getResponse().toString());
				
			}
			System.out.println("==================================");
		}*/
		
		// System.out.println(mapMethod);
		/*System.out.println(mapMaster);
		for (Map.Entry<String, ArrayList<Helper>> entry : mapMaster.entrySet()) {
			ArrayList<Helper> t = entry.getValue();

			System.out.println("Key = " + entry.getKey());
			for (Helper h : t) {
				System.out.println(h.getMethod() + " = " + h.getPath());
			}
			System.out.println("==================================");
		}*/
	}

	public static JSONObject setJsonObject() {
		JSONObject jsonObject = null;
		try {
			String loc = new String("/C:/Users/pavpatil/Desktop/API/openapi.json");
			File file = new File(loc);
			String content = new String(Files.readAllBytes(Paths.get(file.toURI())));
			jsonObject = new JSONObject(content);
		} catch (JSONException e) {
			System.out.print(e);
		} catch (IOException e) {
			System.out.print(e);
		}
		parent = jsonObject;
		return jsonObject;
	}

	public static void fillTags() {
		try {

			JSONObject jsonObject = parent;
			JSONArray Tags = (JSONArray) jsonObject.get("tags");

			for (int i = 0; i < Tags.length(); i++) {
				JSONObject objectInArray = Tags.getJSONObject(i);
				String tagDesc = "";
				String tagName = "";

				if (objectInArray.has("name"))
					tagName = objectInArray.getString("name");

				if (objectInArray.has("description"))
					tagDesc = objectInArray.getString("description");

				tags_info t = new tags_info();
				t.setTagName(tagName);
				t.setTagDesc(tagDesc);

				mapDesc.put(tagName, tagDesc);

				ArrayList<xmlHelper> h = new ArrayList<>();
				mapMaster.put(tagName, h);
			}

		} catch (JSONException e) {
			System.out.print(e);
		}
	}

	public static boolean isMethod(String key) {
		if (key.equals("get") || key.equals("post") || key.equals("delete") || key.equals("patch")
				|| key.equals("update"))
			return true;
		return false;
	}

	public static boolean isRequestBody(String key) {
		if (key.equals("requestBody"))
			return true;
		return false;
	}

	public static boolean isResponseBody(String key) {
		if (key.equals("responses"))
			return true;
		return false;
	}

	public static boolean isParameter(String key) {
		if (key.equals("parameters"))
			return true;
		return false;
	}

	public static ArrayList<parameter> extractParameters(JSONArray parameterArray) {
		ArrayList<parameter> arr = new ArrayList<>();
		for (int i = 0; i < parameterArray.length(); i++) {
			try {
				JSONObject parameter = parameterArray.getJSONObject(i);
				parameter p = new parameter();
				if (parameter.has("name"))
					p.setName(parameter.getString("name"));

				if (parameter.has("required"))
					p.setRequired(parameter.getBoolean("required"));

				if (parameter.has("schema")) {
					JSONObject fields = parameter.getJSONObject("schema");
					if (fields.has("type"))
						p.setType(fields.getString("type"));
					if (fields.has("readOnly"))
						p.setReadOnly(fields.getBoolean("readOnly"));
				}
				// p.setRequired(Boolean.valueOf(parameter.getString(("required"))));
				arr.add(p);

			} catch (JSONException e) {
				System.out.print(e);
			}

		}
		return arr;
	}

	public static ArrayList<String> extractResponse(JSONObject obj) {
		ArrayList<String> response = new ArrayList<>();
		try {
			JSONObject contentObj = null;
			String schemaPath = "";
			if (obj.has("responses")) {
				contentObj = obj.getJSONObject("responses");
				if (contentObj.has("default")) {
					contentObj = contentObj.getJSONObject("default");
					if (contentObj.has("content")) {
						contentObj = contentObj.getJSONObject("content");
						if (contentObj.has("application/json")) {
							contentObj = contentObj.getJSONObject("application/json");
							if (contentObj.has("schema")) {
								// contentObj =
								contentObj = contentObj.getJSONObject("schema");
								if(contentObj.has("$ref"))
								schemaPath = contentObj.getString("$ref");
							}
						}
					}
				}
			}

			int idx = schemaPath.lastIndexOf("/");
			schemaPath = schemaPath.substring(idx + 1, schemaPath.length());

			JSONObject componentObj = null;
			JSONObject schemaObj = null;
			JSONObject propObj = null;
			JSONObject props = null;
			
			if (parent.has("components")) {
				componentObj = parent.getJSONObject("components");

				if (componentObj.has("schemas")) {
					schemaObj = componentObj.getJSONObject("schemas");

					if (schemaObj.has(schemaPath)) {
						propObj = schemaObj.getJSONObject(schemaPath);
						Iterator<String> itr = propObj.keys();
						while(itr.hasNext()){
							String key = itr.next();
							if(key.equals("properties")){
								props = propObj.getJSONObject(key);
								Iterator<String> citr = props.keys();
								while(citr.hasNext()){
									String ckey = citr.next();
									response.add(ckey);
								}
								
							}
							
						}
					}
				}
			}

		} catch (JSONException e) {
			System.out.print(e);
		}

		return response;
	}

	public static void getPathsData() {
		try {

			JSONObject jsonObject = parent;
			// if (jsonObject.has(key)) {
			JSONObject pathObject = jsonObject.getJSONObject("paths");
			Iterator<String> pathkeys = pathObject.keys();

			int cnt = 0;
			while (pathkeys.hasNext()) {
				String key = pathkeys.next();
				xmlHelper xml = new xmlHelper();
				ArrayList<xmlHelper> a = new ArrayList<>();
				if (pathObject.has(key)) {
					JSONObject singlePathObject = pathObject.getJSONObject(key);
					Iterator<String> singlepathkeys = singlePathObject.keys();
					ArrayList<String> arr = new ArrayList<>();

					while (singlepathkeys.hasNext()) {
						String ckey = singlepathkeys.next();
						if (singlePathObject.has(ckey)) {

							if (isMethod(ckey)) {

								JSONArray methodArray = singlePathObject.getJSONObject(ckey).getJSONArray("tags");
								String tagName = methodArray.getString(0);
								xml.setPath(key);
								xml.setMethod(ckey);

								if (singlePathObject.getJSONObject(ckey).has("parameters")) {
									JSONArray parameterArray = singlePathObject.getJSONObject(ckey)
											.getJSONArray("parameters");
									ArrayList<parameter> pm = extractParameters(parameterArray);
									xml.setParameters(pm);
								}
								if (singlePathObject.getJSONObject(ckey).has("responses")) {
									JSONArray parameterArray = singlePathObject.getJSONObject(ckey)
											.getJSONArray("parameters");
									ArrayList<String> res = extractResponse(singlePathObject.getJSONObject(ckey));
									xml.setResponse(res);
								}
								//a.add(xml);
								if (mapMaster.containsKey(tagName)) {
									//mapMethod.get(tagName).add(key);
									mapMaster.get(tagName).add(xml);
								}
							}
						}
					}
				}
				
				cnt++;

			}
			// System.out.println(pathObject);

			System.out.println(cnt);
			// JSONArray Tags = (JSONArray) jsonObject.get("tags");
		} catch (JSONException e) {
			System.out.print(e);
		}
	}

}
