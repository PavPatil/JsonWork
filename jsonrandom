package json_modify;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.parser.core.extensions.SwaggerParserExtension;
import io.swagger.v3.parser.core.models.AuthorizationValue;
import io.swagger.v3.parser.core.models.ParseOptions;
import io.swagger.v3.parser.core.models.SwaggerParseResult;
import io.swagger.v3.parser.exception.EncodingNotSupportedException;
import io.swagger.v3.parser.exception.ReadContentException;
import io.swagger.v3.parser.util.ClasspathHelper;
import io.swagger.v3.parser.util.DeserializationUtils;
import io.swagger.v3.parser.util.InlineModelResolver;
import io.swagger.v3.parser.util.OpenAPIDeserializer;
import io.swagger.v3.parser.util.RemoteUrl;
import io.swagger.v3.parser.util.ResolverFully;

import io.swagger.parser.OpenAPIParser;
import io.swagger.v3.parser.OpenAPIV3Parser;
import io.swagger.v3.parser.core.models.SwaggerParseResult;
import io.swagger.v3.oas.models.OpenAPI;

public class test_JSON {
	public static void main(String args[]){
		test();
	}
	public static void test(){

		//System.out.print("App");
		BufferedReader in = null;
		try{
		Base64.Encoder encoder = Base64.getEncoder();
		String str = "vcastell@tibco.com" + ":" + "L!tmein1now2";
		String authorizationCode = encoder.encodeToString(str.getBytes());	
		String metadataUrlString = 
	"https://fa-evxg-test-saasfaprod1.fa.ocs.oraclecloud.com//fscmRestApi/resources/11.13.18.05/bankAccountUserRules/300000000290964/describe";
		//String murl1="https://api.sap.com/odata/1.0/catalog.svc/$metadata";
		//URL metadataUrl = new URL(metadataUrlString);
		String metadataUrlString1 = "https://fa-evxg-test-saasfaprod1.fa.ocs.oraclecloud.com//fscmRestApi/resources/11.13.18.05/cashBankAccounts/describe";
		String test = " https://docs.oracle.com/en/cloud/saas/financials/22d/farfa/openapi.json";
		
		URL metadataUrl = new URL(test);
		HttpURLConnection metadataConnection = (HttpURLConnection) metadataUrl.openConnection();
		metadataConnection.setRequestMethod("GET");
		metadataConnection.setRequestProperty("Content-Type", "application/json");
		metadataConnection.setRequestProperty("Accept", "application/json");
		//metadataConnection.setRequestProperty("Authorization", "Basic " + authorizationCode);
		metadataConnection.setDoInput(true);
		
		metadataConnection.connect();
		int responseCode = metadataConnection.getResponseCode();
		

		in = new BufferedReader(new InputStreamReader(metadataConnection.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();
		
		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		String content = response.toString();
		String test1 = content.replaceAll("\\s", "");
		System.out.println(test1);
		/*
		if (responseCode == 200) {
			
			String content = response.toString();
			String apiName = getApiName(content);
			try{
				JSONObject obj = new JSONObject(content);
				JSONArray arr =  obj.getJSONObject("Resources").getJSONObject(apiName).getJSONArray("links");
				String link = arr.getJSONObject(0).getString("href");
				String required = getRequiredLink(link);
				
				JSONArray arr1 =  obj.getJSONObject("Resources").getJSONObject(apiName).getJSONObject("item").getJSONArray("actions");
				String[] methods = getMethods(arr1);
				for(String method:methods)
					System.out.println(method);
				//String ans = arr1.get
			
			}catch(JSONException e){
				System.out.println(e);
			}
		}*/
		
		
		}
		catch(Exception e){
			
		}
	
	}
	public static String getApiName(String content){
		String ans="";
		String test = content.replaceAll("\\s", "");
		int idx0 = test.indexOf(":", 0);
		int idx1 = test.indexOf("\"", idx0);
		int idx2 = test.indexOf("\"", idx1+1);
		ans = test.substring(idx1+1,idx2);
		System.out.println(ans);
		return ans;
	}
	public static String getRequiredLink(String content){
		String ans="";
		String test = content.replaceAll("\\s", "");
		int idx0 = test.indexOf("fscmRestApi", 0);
		int idx1 = test.indexOf("describe", 0);
		
		ans = test.substring(idx0-1,idx1-1);
		System.out.println(ans);
		//int idx1 = test.indexOf("\"", idx0);
		//int idx2 = test.indexOf("\"", idx1+1);
		//ans = test.substring(idx1+1,idx2);
		//System.out.print(ans);
		return ans;
	}
	public static String[] getMethods(JSONArray content){
		String[] ans= new String[content.length()];
		int idx=0;
		try{
			for(int i=0;i<content.length();i++){
				JSONObject objectInArray = content.getJSONObject(i);
				String method = objectInArray.getString("method");
				//System.out.print(method+"==");
				ans[idx++]=method;
			}
		}
		catch(JSONException e){
			System.out.println(e);
		}
		return ans;
	}
	
	public static void json1(){
		 SwaggerParseResult result = new OpenAPIParser().readLocation("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
	}
	
	public static void doc(){
		Document document = DocumentHelper.createDocument();
		Namespace xsdNs = DocumentHelper.createNamespace("xsd", XMLConstants.W3C_XML_SCHEMA_NS_URI);
		QName xsdSchema = DocumentHelper.createQName("schema", xsdNs);
		Element root = document.addElement(xsdSchema);
		
		URI projURI = EcoreUtil.getURI(eObject);
		String curProjectName = projURI.segment(1);
		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
		final IProject curProject = workspaceRoot.getProject(curProjectName);
		String targetNs = null;				
		
		if(BWCompositeHelper.INSTANCE.isExecutableModule(curProject))
			targetNs = "http://www.tibco.com/xmlns/sapsaasconnection/SAPAriba/" + serviceName;
		else
			targetNs = "http://www.tibco.com/xmlns/sapsaasconnection/SAPAriba/SM/" + serviceName;
				
		root.addAttribute("xmlns:tns", targetNs);
		root.addAttribute("targetNamespace", targetNs);
		root.addAttribute("xmlns:saas", "http://www.tibco.com/xmlns/sapsaasconnection");
		root.addAttribute("elementFormDefault", "qualified");
		root.addAttribute("attributeFormDefault", "unqualified");

		root.addElement("xsd:import")
				.addAttribute("namespace", "http://www.tibco.com/xmlns/sapsaasconnection")
				.addAttribute("schemaLocation", "SapSaasConnectionSchema.xsd");
	}
	
}
